-- **Trendyol Project Schema**


--**Creating Tables**
-- 1. **Customers Table**
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(25),
    last_name VARCHAR(25),
    address VARCHAR(100), -- Fixed typo: "adress" -> "address"
    email VARCHAR(50),
    phone_number VARCHAR(15)
);

-- 2. **Suppliers Table**
CREATE TABLE suppliers (
    supplier_id INT PRIMARY KEY,
    supplier_name VARCHAR(100),
    contact_name VARCHAR(100),
    address VARCHAR(100), -- Fixed typo: "adress" -> "address"
    phone_number VARCHAR(15),
    email VARCHAR(100)
);

-- 3. **Orders Table**
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    customer_id INT, -- Foreign key referencing customers
    total_price DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- 4. **Shipment Table**
CREATE TABLE shipment (
    shipment_id INT PRIMARY KEY,
    order_id INT, -- Foreign key referencing orders
    shipment_date DATE,
    carrier VARCHAR(25),
    tracking_number VARCHAR(50),
    delivery_date DATE,
    shipment_status VARCHAR(50),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- 5. **Payment Table**
CREATE TABLE payment (
    payment_id INT PRIMARY KEY,
    order_id INT, -- Foreign key referencing orders
    payment_method VARCHAR(25), -- Fixed typo: "paymnt_method" -> "payment_method"
    amount DECIMAL(10,2),
    transaction_status VARCHAR(50),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- 6. **Products Table**
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    category VARCHAR(50),
    price DECIMAL(10,2),
    supplier_id INT, -- Foreign key referencing suppliers
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)
);

-- 7. **Order Items Table**
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT, -- Foreign key referencing orders
    product_id INT, -- Foreign key referencing products
    quantity INT,
    price_at_purchase DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- 8. **Reviews Table**
CREATE TABLE reviews (
    review_id INT PRIMARY KEY,
    product_id INT, -- Foreign key referencing products
    customer_id INT, -- Foreign key referencing customers
    rating INT,
    review_text VARCHAR(100),
    review_date DATE,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);


- **Exploratory Data Analysis (EDA) and Data Cleaning**

-- 1. **Customers Table**
-- Check total and distinct customers
SELECT COUNT(*) AS total_rows FROM customers;
SELECT COUNT(DISTINCT customer_id) AS total_distinct_customers FROM customers;

-- Remove rows with NULL customer_id
DELETE FROM customers WHERE customer_id IS NULL;

-- Disable safe updates to allow global updates
SET SQL_SAFE_UPDATES = 0;

-- Trim and standardize text data
UPDATE customers
SET 
    customer_id = TRIM(customer_id),
    first_name = TRIM(first_name),
    last_name = TRIM(last_name),
    email = TRIM(email),
    phone_number = TRIM(phone_number);

UPDATE customers
SET 
    customer_id = LOWER(customer_id),
    first_name = LOWER(first_name),
    last_name = LOWER(last_name),
    email = LOWER(email),
    phone_number = LOWER(phone_number);

-- 2. **Order Items Table**
-- Check total and distinct order items
SELECT COUNT(*) AS total_rows FROM order_items;
SELECT COUNT(DISTINCT order_item_id) AS total_distinct_order_items FROM order_items;

-- Remove rows with NULL order_item_id
DELETE FROM order_items WHERE order_item_id IS NULL;

-- Trim and standardize text data
UPDATE order_items
SET 
    order_item_id = TRIM(order_item_id),
    order_id = TRIM(order_id),
    product_id = TRIM(product_id),
    quantity = TRIM(quantity),
    price_at_purchase = TRIM(price_at_purchase);

UPDATE order_items
SET 
    order_item_id = LOWER(order_item_id),
    order_id = LOWER(order_id),
    product_id = LOWER(product_id),
    quantity = LOWER(quantity),
    price_at_purchase = LOWER(price_at_purchase);

-- Show table structure
SHOW CREATE TABLE order_items;

-- 3. **Orders Table**
-- Check total and distinct orders
SELECT COUNT(*) AS total_rows FROM orders;
SELECT COUNT(DISTINCT order_id) AS total_distinct_orders FROM orders;

-- Remove rows with NULL order_id
DELETE FROM orders WHERE order_id IS NULL;

-- Trim and standardize text data
UPDATE orders
SET 
    order_id = TRIM(order_id),
    order_date = TRIM(order_date),
    customer_id = TRIM(customer_id),
    total_price = TRIM(total_price);

UPDATE orders
SET 
    order_id = LOWER(order_id),
    order_date = LOWER(order_date),
    customer_id = LOWER(customer_id),
    total_price = LOWER(total_price);

-- Show table structure
SHOW CREATE TABLE orders;

-- 4. **Payment Table**
-- Check total and distinct payments
SELECT COUNT(*) AS total_rows FROM payment;
SELECT COUNT(DISTINCT payment_id) AS total_distinct_payments FROM payment;

-- Remove rows with NULL payment_id
DELETE FROM payment WHERE payment_id IS NULL;

-- Rename incorrectly named column
ALTER TABLE payment CHANGE paymnt_method payment_method VARCHAR(25);

-- Trim and standardize text data
UPDATE payment
SET 
    payment_id = TRIM(payment_id),
    order_id = TRIM(order_id),
    payment_method = TRIM(payment_method),
    amount = TRIM(amount),
    transaction_status = TRIM(transaction_status);

UPDATE payment
SET 
    payment_id = LOWER(payment_id),
    order_id = LOWER(order_id),
    payment_method = LOWER(payment_method),
    amount = LOWER(amount),
    transaction_status = LOWER(transaction_status);

-- Show table structure
SHOW CREATE TABLE payment;

-- 5. **Products Table**
-- Check total and distinct products
SELECT COUNT(*) AS total_rows FROM products;
SELECT COUNT(DISTINCT product_id) AS total_distinct_products FROM products;

-- Remove rows with NULL product_id
DELETE FROM products WHERE product_id IS NULL;

-- Trim and standardize text data
UPDATE products
SET 
    product_id = TRIM(product_id),
    product_name = TRIM(product_name),
    category = TRIM(category),
    price = TRIM(price),
    supplier_id = TRIM(supplier_id);

UPDATE products
SET 
    product_id = LOWER(product_id),
    product_name = LOWER(product_name),
    category = LOWER(category),
    price = LOWER(price),
    supplier_id = LOWER(supplier_id);

-- Show table structure
SHOW CREATE TABLE products;

-- 6. **Reviews Table**
-- Check total and distinct reviews
SELECT COUNT(*) AS total_rows FROM reviews;
SELECT COUNT(DISTINCT review_id) AS total_distinct_reviews FROM reviews;

-- Remove rows with NULL review_id
DELETE FROM reviews WHERE review_id IS NULL;

-- Trim and standardize text data
UPDATE reviews
SET 
    review_id = TRIM(review_id),
    product_id = TRIM(product_id),
    customer_id = TRIM(customer_id),
    rating = TRIM(rating),
    review_text = TRIM(review_text),
    review_date = TRIM(review_date);

UPDATE reviews
SET 
    review_id = LOWER(review_id),
    product_id = LOWER(product_id),
    customer_id = LOWER(customer_id),
    rating = LOWER(rating),
    review_text = LOWER(review_text),
    review_date = LOWER(review_date);

-- Show table structure
SHOW CREATE TABLE reviews;

-- 7. **Shipment Table**
-- Check total and distinct shipments
SELECT COUNT(*) AS total_rows FROM shipment;
SELECT COUNT(DISTINCT shipment_id) AS total_distinct_shipments FROM shipment;

-- Remove rows with NULL shipment_id
DELETE FROM shipment WHERE shipment_id IS NULL;

-- Trim and standardize text data
UPDATE shipment
SET 
    shipment_id = TRIM(shipment_id),
    shipment_date = TRIM(shipment_date),
    carrier = TRIM(carrier),
    tracking_number = TRIM(tracking_number),
    delivery_date = TRIM(delivery_date),
    shipment_status = TRIM(shipment_status);

UPDATE shipment
SET 
    shipment_id = LOWER(shipment_id),
    shipment_date = LOWER(shipment_date),
    carrier = LOWER(carrier),
    tracking_number = LOWER(tracking_number),
    delivery_date = LOWER(delivery_date),
    shipment_status = LOWER(shipment_status);

-- Show table structure
SHOW CREATE TABLE shipment;

-- 8. **Suppliers Table**
-- Check total and distinct suppliers
SELECT COUNT(*) AS total_rows FROM suppliers;
SELECT COUNT(DISTINCT supplier_id) AS total_distinct_suppliers FROM suppliers;

-- Remove rows with NULL supplier_id
DELETE FROM suppliers WHERE supplier_id IS NULL;

-- Rename incorrectly named column
ALTER TABLE suppliers CHANGE adress address VARCHAR(100);

-- Trim and standardize text data
UPDATE suppliers
SET 
    supplier_id = TRIM(supplier_id),
    supplier_name = TRIM(supplier_name),
    contact_name = TRIM(contact_name),
    address = TRIM(address),
    phone_number = TRIM(phone_number),
    email = TRIM(email);

UPDATE suppliers
SET 
    supplier_id = LOWER(supplier_id),
    supplier_name = LOWER(supplier_name),
    contact_name = LOWER(contact_name),
    address = LOWER(address),
    phone_number = LOWER(phone_number),
    email = LOWER(email);

-- Show table structure
SHOW CREATE TABLE suppliers;


## Analysis Queries



### 1. Month Over Month Sales Trend

**Question:**  
How can I analyze the month-over-month sales trend to identify changes in sales performance over time?

```sql
WITH monthly_sales AS (
    SELECT 
        YEAR(o.order_date) AS year,
        MONTH(o.order_date) AS month_number,
        MONTHNAME(o.order_date) AS month,
        SUM(oi.total_sales) AS total_sale
    FROM 
        orders o
    JOIN 
        order_items oi ON oi.order_id = o.order_id
    GROUP BY 
        year, month_number, month
    ORDER BY 
        year ASC, month_number ASC
)

SELECT 
    year,
    month_number,
    month,
    LAG(total_sale) OVER (ORDER BY year ASC, month_number ASC) AS last_month_sales
FROM 
    monthly_sales
ORDER BY 
    year ASC, month_number ASC;




### 2. Revenue By Category

**Question:**  
How can I calculate the total revenue and percentage contribution of each product category?

```sql
SELECT 
    p.category AS category,
    SUM(oi.total_sales) AS total_sale,
    (SUM(oi.total_sales) * 100.0) / SUM(SUM(oi.total_sales)) OVER () AS percentage_contribution
FROM 
    order_items oi
LEFT JOIN 
    products p ON p.product_id = oi.product_id
GROUP BY 
    p.category;



### 3. Best-Selling Categories by State

**Question:**  
Which state generates the highest revenue for each product category, and what is the total sales within that state?

```sql
WITH sales_data AS (
    SELECT 
        SUBSTRING_INDEX(c.address, ",", -1) AS states,
        p.category AS category,
        SUM(oi.total_sales) AS total_sale
    FROM orders o
    JOIN customers c ON c.customer_id = o.customer_id
    JOIN order_items oi ON oi.order_id = o.order_id
    JOIN products p ON p.product_id = oi.product_id
    GROUP BY p.category, states
),
ranked_data AS (
    SELECT 
        states,
        category,
        total_sale,
        RANK() OVER (PARTITION BY states ORDER BY total_sale DESC) AS ranking
    FROM sales_data
)
SELECT 
    states,
    category,
    total_sale
FROM ranked_data
WHERE ranking = 1;



### 4. Top-Selling Products

**Question:**  
What are the top-selling products by total revenue, and how do these high-revenue products contribute to the company’s overall strategy?

```sql
SELECT  
    p.product_name AS product_name,  
    COUNT(o.order_id) AS quantity_sold,  
    SUM(oi.total_sales) AS total_sale  
FROM  
    order_items oi  
JOIN  
    orders o ON o.order_id = oi.order_id  
JOIN  
    products p ON p.product_id = oi.product_id  
GROUP BY  
    p.product_name  
ORDER BY  
    total_sale DESC  
LIMIT 10;




### 5. Top 5 Suppliers and Their Contribution

**Question:**  
Who are the top 10 suppliers based on total sales value, and what percentage of the company’s total revenue do they contribute?

```sql
WITH supplier_sales AS (
    SELECT
        s.supplier_id AS supplier_id,
        s.supplier_name AS supplier_name,
        SUM(oi.total_sales) AS total_sale
    FROM products p
    JOIN order_items oi ON oi.product_id = p.product_id
    JOIN suppliers s ON s.supplier_id = p.supplier_id
    GROUP BY s.supplier_id, s.supplier_name
),
total_sales AS (
    SELECT SUM(total_sale) AS company_total_sales
    FROM supplier_sales
)
SELECT
    ss.supplier_id,
    ss.supplier_name,
    ss.total_sale,
    (ss.total_sale * 100.0) / ts.company_total_sales AS contribution_percentage
FROM supplier_sales ss
CROSS JOIN total_sales ts
ORDER BY ss.total_sale DESC
LIMIT 10;





### 6. Suppliers Below Average Sales in the Last 6 Months

**Question:**  
Which suppliers have made sales in the last 6 months but have total sales below the average of all suppliers during this period? How much are their sales below the average?

```sql
WITH sales_data AS (
    SELECT 
        s.supplier_id AS supplier_id,
        s.supplier_name AS supplier_name,
        MAX(o.order_date) AS last_sale_date,
        SUM(oi.quantity * oi.price_at_purchase) AS total_sales
    FROM suppliers s
    LEFT JOIN products p ON s.supplier_id = p.supplier_id
    LEFT JOIN order_items oi ON p.product_id = oi.product_id
    LEFT JOIN orders o ON oi.order_id = o.order_id
    WHERE o.order_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) -- Filter for last 6 months
    GROUP BY s.supplier_id, s.supplier_name
),
avg_sales AS (
    SELECT AVG(total_sales) AS avg_total_sale 
    FROM sales_data
)
SELECT 
    sd.supplier_id,
    sd.supplier_name,
    sd.last_sale_date,
    FORMAT(avg.avg_total_sale - sd.total_sales, 2) AS sales_difference
FROM sales_data sd
CROSS JOIN avg_sales avg 
WHERE sd.total_sales < avg.avg_total_sale
ORDER BY (avg.avg_total_sale - sd.total_sales) DESC
LIMIT 10;



### 7. Customer Lifetime Value

**Question:**  
Which customers have the highest lifetime value, and how can we rank them based on their total contributions to the company?

```sql
SELECT 
    o.customer_id AS customer_id,
    CONCAT(c.first_name, " ", c.last_name) AS customer_name,
    FORMAT(SUM(oi.total_sales), 0) AS customer_lifetime_value,
    DENSE_RANK() OVER (ORDER BY SUM(oi.total_sales) DESC) AS customer_rank
FROM 
    orders o
JOIN 
    order_items oi ON oi.order_id = o.order_id
JOIN 
    customers c ON c.customer_id = o.customer_id
GROUP BY 
    o.customer_id, c.first_name, c.last_name
ORDER BY 
    customer_rank ASC
LIMIT 20;





### 8. Customers with No Purchases

**Question:**  
Who are the customers that registered but did not make any purchases?

```sql
SELECT 
    c.customer_id AS customer_id,
    CONCAT(c.first_name, " ", c.last_name) AS customer_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE c.customer_id NOT IN (
    SELECT customer_id 
    FROM orders
)
GROUP BY customer_id, customer_name

UNION 

SELECT 
    'N/A' AS customer_id,
    'N/A' AS customer_name
WHERE NOT EXISTS (
    SELECT 1
    FROM customers c
    LEFT JOIN orders o ON c.customer_id = o.customer_id
    WHERE c.customer_id NOT IN (
        SELECT customer_id 
        FROM orders
    )
);


### 9. Shipment Delays Analysis

**Question:**  
What is the average time taken (in days) for shipments to be processed after an order is placed, and how many shipments took 3 or more days to ship?

```sql
SELECT 
    s.shipment_id AS shipment_id,
    CONCAT(c.first_name, " ", c.last_name) AS customer,
    o.order_date AS order_date,
    s.shipment_date AS shipment_date,
    DATEDIFF(s.shipment_date, o.order_date) AS shipment_days,
    s.carrier
FROM shipment s
JOIN orders o ON o.order_id = s.order_id
JOIN customers c ON c.customer_id = o.customer_id
GROUP BY s.shipment_id, c.first_name, c.last_name, o.order_date, s.shipment_date, s.carrier
HAVING shipment_days >= 3;




### 10. Payment Success Rate

**Question:**  
What is the percentage of successful payments across all orders, and how do payment success rates vary by payment method and transaction month?

```sql
WITH payment_summary AS (
    SELECT 
        p.transaction_status,
        p.payment_method,
        DATE_FORMAT(o.order_date, '%Y-%m') AS transaction_month,
        COUNT(p.payment_id) AS payment_count,
        SUM(p.amount) AS total_amount
    FROM payment p
    JOIN orders o ON p.order_id = o.order_id
    GROUP BY p.transaction_status, p.payment_method, transaction_month
),
payment_percentage AS (
    SELECT 
        transaction_status,
        payment_method,
        transaction_month,
        payment_count,
        total_amount,
        (payment_count * 100.0) / SUM(payment_count) OVER () AS overall_status_percentage,
        (payment_count * 100.0) / SUM(payment_count) OVER (PARTITION BY transaction_month) AS monthly_status_percentage
    FROM payment_summary
)
SELECT 
    transaction_status,
    payment_method,
    transaction_month,
    payment_count,
    total_amount,
    overall_status_percentage,
    monthly_status_percentage
FROM payment_percentage
ORDER BY transaction_month ASC, overall_status_percentage DESC;

